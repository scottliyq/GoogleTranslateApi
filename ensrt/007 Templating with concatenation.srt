1
00:00:00,150 --> 00:00:05,520
So this sounds like a little bit of an odd statement but and when you program with go one of my philosophies

2
00:00:05,520 --> 00:00:12,430
one of my philosophies about go is go really encourages you to think like a programmer.

3
00:00:13,100 --> 00:00:19,500
And that sounds like an odd statement because you know when you you know so many people use things like

4
00:00:19,500 --> 00:00:25,110
peach pea or Ruby or Django with Python or Noad or whatever.

5
00:00:25,110 --> 00:00:25,460
Right.

6
00:00:25,470 --> 00:00:31,640
And they are doing programming but they might not necessarily be thinking like a programmer.

7
00:00:31,860 --> 00:00:38,760
And so they might rely on a bunch of code word that's abstracted away functionality and they just use

8
00:00:38,760 --> 00:00:42,510
some method and that's the way they get stuff done.

9
00:00:42,580 --> 00:00:46,170
And so go really encourages you to approach the problem.

10
00:00:46,170 --> 00:00:50,540
This is my perspective and see if there's a programmatic solution to it.

11
00:00:50,580 --> 00:00:54,510
Like how would you use these programming tools to create the solution.

12
00:00:54,510 --> 00:00:56,840
And that's what we'll be doing in this course.

13
00:00:57,030 --> 00:01:04,470
We will eventually get to the point where we see hey here is here are these you know functions have

14
00:01:04,470 --> 00:01:09,420
been written for us which we can use or this package which we can use which really simplifies a lot

15
00:01:09,420 --> 00:01:14,870
of things for us and that's great but we're also going to look at problems from the programmers perspective

16
00:01:14,880 --> 00:01:17,630
like how would we solve this with just programming.

17
00:01:17,670 --> 00:01:19,390
So we're going to do that with templates.

18
00:01:19,530 --> 00:01:22,710
And when we get to servers we're going to do that with servers right.

19
00:01:22,710 --> 00:01:29,520
There's an entire package built for serving files and that's what we'll ultimately use.

20
00:01:29,700 --> 00:01:35,340
But just for your own edification and so that you have a good knowledge base about how the web works

21
00:01:35,640 --> 00:01:45,270
we're going to build our own TCAP server using the net package and HTP is a protocol that uses TCAP

22
00:01:45,300 --> 00:01:51,300
server to do all the network transport's stuff and so it will build up our own network server in the

23
00:01:51,300 --> 00:01:58,560
now allows us to understand you know multiplexers and routing and all of that and then we'll have some

24
00:01:58,620 --> 00:02:08,730
insight into the functions that we end up using that abstract all that code in a Google level way for

25
00:02:08,730 --> 00:02:08,950
us.

26
00:02:08,960 --> 00:02:13,280
But we will build it up at a rudimentary level the exact same stuff.

27
00:02:13,290 --> 00:02:19,860
So thinking like a programmer that's what go encourages And is there a programmatic solution to a problem

28
00:02:19,920 --> 00:02:25,830
instead of just relying upon some library code that's already been written for you.

29
00:02:26,400 --> 00:02:30,340
To that end when it comes to templating advised ask you that question.

30
00:02:30,540 --> 00:02:37,980
Is there some way that you could just work with text and create merge data with an H UML file and get

31
00:02:37,980 --> 00:02:44,040
an h m l filed come out as a programmer from a programmer's perspective.

32
00:02:44,040 --> 00:02:47,830
Right you need to create an email file with that emerged into it.

33
00:02:47,940 --> 00:02:49,960
How will you go about doing that.

34
00:02:49,980 --> 00:02:55,040
So if we have and here's a solution maybe you want to pause a video and work on that for a second you

35
00:02:55,040 --> 00:02:56,570
yourself just think it through.

36
00:02:56,640 --> 00:03:03,170
But if we have you know just text we're working with strings we can use concatenate.

37
00:03:03,210 --> 00:03:08,520
I can't say that word we can have an eight together strings to create what we want to do.

38
00:03:08,700 --> 00:03:10,920
And so that's what these first three examples show.

39
00:03:10,920 --> 00:03:13,400
And so I just call it rudimentary templating.

40
00:03:13,410 --> 00:03:13,800
Right.

41
00:03:13,820 --> 00:03:15,680
And so are primitive templating.

42
00:03:15,810 --> 00:03:17,500
So here I have a string Todman cloud.

43
00:03:17,520 --> 00:03:23,130
And then here I have a string and HD M-L document and I'm just merging this value with that value.

44
00:03:23,160 --> 00:03:24,470
And then I'm printing it out.

45
00:03:24,780 --> 00:03:35,810
And so that will print out the shemale text and if I change up folder here and go there there's my email

46
00:03:36,180 --> 00:03:42,990
and I can also do government run and I go and I could dump that file using command line stuff like command

47
00:03:42,990 --> 00:03:50,340
line commands and that's going to take the output pipe line the output of this and put it into that

48
00:03:50,340 --> 00:03:51,390
file.

49
00:03:51,420 --> 00:03:57,630
And so if I do that then I have an HMO shemale file and I could choose reveal and finder except I'm

50
00:03:57,630 --> 00:04:04,170
on Windows and my Mac has Windows machines set up for recording show and explores what I'm looking for

51
00:04:04,680 --> 00:04:07,920
and I could open that browser and there's my web page.

52
00:04:07,980 --> 00:04:14,560
So just using BASIC programming I was able to merge data with an H email page and get that output so

53
00:04:14,560 --> 00:04:16,200
mentally that you could do that.

54
00:04:16,410 --> 00:04:21,700
And we could also you know approach that where Stabb using dumping to standard out.

55
00:04:21,870 --> 00:04:27,780
We could do the same thing merge data with a string and then we could create a file using create from

56
00:04:28,530 --> 00:04:35,910
the standard libraries OS package get our new file check the air write defer close the file and then

57
00:04:35,910 --> 00:04:38,310
use IO copy and bring that string.

58
00:04:38,340 --> 00:04:41,230
Make it a reader so he could pass it into IO copy.

59
00:04:41,240 --> 00:04:47,790
So copy takes a reader and a writer writes strings new reader pass that string in and write to the new

60
00:04:47,790 --> 00:04:54,540
file and will produce the file and then one last way we could do is we can accept arguments at the command

61
00:04:54,540 --> 00:05:01,680
line and so from package OS we have args and I'm saying give me one and that's the name the first one

62
00:05:01,680 --> 00:05:08,610
is the program you've executed the second one will be additional input and then you know concatenate

63
00:05:08,610 --> 00:05:12,930
that data together with a string which is an email file.

64
00:05:12,930 --> 00:05:15,040
Create a file and then write that file.

65
00:05:15,040 --> 00:05:27,740
And so when we were run this last one here it was three go to Maine go to actually not like that.

66
00:05:28,120 --> 00:05:32,160
And so there it is and it dumps that out.

67
00:05:32,330 --> 00:05:36,520
And I can reveal that and show and explore.

68
00:05:36,890 --> 00:05:38,040
And there you go.

69
00:05:38,150 --> 00:05:41,520
McLeod and Page sors.

70
00:05:41,600 --> 00:05:43,130
And there's my age you know.

71
00:05:43,340 --> 00:05:49,420
So that's kind of a cool thing and I like that approach of just like think about it like a programmer.

72
00:05:49,430 --> 00:05:52,390
How do we solve this problem we need to merge data with text.

73
00:05:52,640 --> 00:06:01,400
And so these are some basic approaches at primitive low level rudimentary level to doing some templating

74
00:06:01,490 --> 00:06:06,280
merging data with text because each email files are just text.

75
00:06:06,590 --> 00:06:07,010
All right.

76
00:06:07,010 --> 00:06:10,580
So in the next one we're going to take a look at next video.

77
00:06:10,580 --> 00:06:18,740
Take a look at using a template parse file so from the text template package we have parsed files and

78
00:06:18,740 --> 00:06:22,410
so we could start to do additional functionality which makes things easier.

